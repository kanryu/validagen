// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/ozzo-validator-test.tmpl (1.784kB)
// templates/ozzo-validator.tmpl (3.995kB)
// templates/struct-toml.tmpl (1.138kB)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesOzzoValidatorTestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4f\x6f\xe2\x3e\x10\x3d\xdb\x9f\x62\x7e\x11\x48\xc0\x2f\x75\xd4\x1e\x91\x38\xac\xb6\x7f\x54\x55\x0b\xab\x2d\xda\xcb\x6a\x55\x99\xc4\x09\x51\x83\xd3\x3a\x13\xaa\xca\xf2\x77\x5f\x8d\x93\x14\x68\xa3\x2d\x2c\x07\x48\xc6\x6f\xde\x8c\xdf\x1b\x26\x8a\xe0\x6b\x99\x28\xc8\x94\x56\x46\xa2\x4a\x60\xf5\x0a\x59\x8e\xeb\x7a\x25\xe2\x72\x13\x3d\x4a\x6d\x5e\xeb\x68\x2b\x8b\x3c\x91\x99\xd2\x02\x2e\x17\x30\x5f\x2c\xe1\xea\xf2\x76\x29\xf8\x93\x8c\x1f\x65\xa6\xc0\x5a\xf1\xbd\x79\x74\x8e\x5b\x3b\xd0\x72\xa3\x60\x3a\x03\x31\x97\x9b\x36\xe4\x29\x7c\x6c\xa9\x2a\xbc\x94\x28\xc5\x4f\x0a\x39\xc7\xf3\xcd\x53\x69\x10\x46\x9c\x05\xa8\x2a\xcc\x75\x16\xf0\x31\xe7\x51\x04\x04\xb5\xb6\x65\x79\xb0\x56\x7c\x53\xb8\x2e\x93\xe6\x1d\x24\x10\x1c\xaa\x3a\x47\x05\x69\x69\x60\x24\x61\xf2\x06\x1f\xbf\x83\x8f\xc6\x3c\xad\x75\xfc\x77\xce\x11\xc2\xa4\xed\x41\x2c\xc7\x60\x39\xa3\xb7\x8a\xfa\xfe\xf5\xbb\x42\x53\xc7\x48\x41\xe6\x2f\x08\x00\x15\x9a\x5c\x67\x9c\x31\x09\xcd\xe7\x8d\x99\x33\xf6\x22\x35\x5e\x19\x03\xab\xb2\x2c\x38\x73\x94\x67\x6d\x34\x99\xc0\xe2\x0e\x96\x57\xf7\x4b\x98\x44\x70\xe6\x91\xb6\x85\x4e\x21\x95\x45\xa5\x42\x20\xfe\x29\x04\x8b\xbb\x20\x04\x39\xdd\xb1\x5a\x6e\xed\x19\x0c\xd2\xdc\x54\x48\x4d\x05\x81\x57\xf7\x0c\x8c\xd4\x99\x82\xc1\xa3\x7a\x0d\x81\xb4\xae\x55\xbf\xd6\x8c\xc0\x2f\x39\xae\x5b\x12\xe7\x42\x6b\x95\x4e\x9c\xb3\xb6\xa5\x9d\x79\x9a\x0e\xdb\x3c\x4f\xa9\x71\x98\x44\x07\x0c\xe2\xde\xdf\xde\xb9\xc0\xda\xa6\xbe\x20\x1a\xff\xe5\x29\x83\xf6\x77\x3f\xe7\x56\x23\x9d\xf7\xe2\x7b\xe0\xd7\x45\x29\x3f\x4f\x20\xbc\x7f\x72\x2e\x7c\x27\xc7\x79\xa7\xc7\xf9\xa1\x20\xb7\x7a\xdb\x49\xd2\xba\x32\xbf\xf1\xae\x54\x21\x7c\x49\x12\x28\xb5\x82\x17\x53\xea\x0c\x1a\x35\x73\x8d\x25\xe0\x5a\x41\x5c\x1a\xa3\x62\x84\x44\xa2\x84\x4a\x61\x9f\x8b\x68\xea\x9d\x89\xf3\x1b\x3f\x9c\xd6\xfa\x76\x9c\xeb\x2c\xf5\xff\x12\xb2\x94\xf5\x78\xca\x0e\x6f\x71\xd1\xdd\xe2\x82\x10\x83\xfd\xd6\x8f\xb3\xf3\xe2\x0d\xdd\xbe\xed\x3b\xea\xe3\x79\x0a\xea\xb9\x91\x6c\x2f\x63\xaf\x40\xa3\xe2\x09\xa6\xf7\x24\x1f\xe5\x7e\x4f\xde\x71\x63\xd0\x24\xaa\xa2\x52\xef\x68\xfe\xad\xe9\x93\xbb\x3d\xad\xcd\xdd\xa8\x1f\x8c\x6e\x1b\x77\x9c\xd1\xd4\x3c\x84\x80\x7e\x2a\x1a\xc6\x66\x1b\xd1\x26\x41\xf1\xa3\xd6\x23\x44\x41\x53\x14\x02\xad\xb6\x8f\xcb\x8b\x31\x65\x0c\x65\x23\x0a\x29\x3e\x2e\x44\xc6\x58\x9e\xd2\x61\xb7\xaa\x7c\x0e\xc5\x28\x6f\x36\x03\x9d\x17\x6d\x8c\xa1\xb8\x96\x28\x8b\x74\x14\x0c\x9f\x05\x74\x09\xc3\x6d\x08\xab\x1a\x41\xc6\x58\xcb\xc2\xa7\x0d\xb7\x01\x35\xdd\x36\xb6\x23\x0f\xe9\xd4\xd7\x64\x5e\x36\xe7\x9d\x82\xb6\xd8\x7f\xfb\xc5\x8e\xae\x55\xc6\x71\x6d\x54\x02\xc3\xff\x3f\x2d\x4a\x35\xdd\x98\x84\x75\x9c\xff\x09\x00\x00\xff\xff\x1c\x06\x9e\x2a\xf8\x06\x00\x00")

func templatesOzzoValidatorTestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesOzzoValidatorTestTmpl,
		"templates/ozzo-validator-test.tmpl",
	)
}

func templatesOzzoValidatorTestTmpl() (*asset, error) {
	bytes, err := templatesOzzoValidatorTestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ozzo-validator-test.tmpl", size: 1784, mode: os.FileMode(0666), modTime: time.Unix(1705226393, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0xd8, 0x1a, 0x42, 0xf4, 0xaf, 0xf6, 0x8b, 0x30, 0xdf, 0x87, 0x98, 0xb0, 0x96, 0x27, 0x95, 0x14, 0x81, 0xc5, 0xc6, 0xd1, 0x6c, 0x55, 0xef, 0xb8, 0xdd, 0xbe, 0xc5, 0x59, 0x7a, 0x88, 0xc6}}
	return a, nil
}

var _templatesOzzoValidatorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\xdf\x6f\xe2\xb8\x13\xc0\x9f\x9b\xbf\xc2\x42\xd5\x0a\x2a\x9a\xec\x7e\xb7\xdb\x87\xaf\xee\x4e\x6a\xa1\xbd\xe3\x44\x69\x55\xda\xbd\xbe\x1a\x32\x04\xab\x89\x9d\x75\x1c\xb6\x6c\x94\xff\xfd\xe4\x5f\x49\x80\xa1\xa7\xdb\x7b\x41\x9e\xf1\x67\x66\x3c\x93\xf1\x0f\xa2\x88\x8c\x44\x0c\x24\x01\x0e\x92\x2a\x88\xc9\x62\x4b\x12\xa6\xd6\xe5\x22\x5c\x8a\x2c\x7a\xa5\x5c\x6e\xcb\x68\x43\x53\x16\xd3\x04\x78\x48\xc6\xf7\x64\x76\xff\x44\x6e\xc6\x93\xa7\x30\xc8\xe9\xf2\x95\x26\x40\xaa\x2a\x7c\xb0\xc3\xba\x0e\x02\x96\xe5\x42\x2a\xd2\x0f\xaa\xea\x9c\x44\x67\xc4\xc9\x0e\x2e\x48\x0c\x2b\xc6\x21\x26\x54\x91\xaf\xc6\xb1\x82\xb9\x92\xe5\x52\x85\x13\x4b\x9e\x45\x75\x6d\x8c\x25\xe5\x09\x10\xa7\xae\xeb\xe0\xa4\x57\x55\x61\x5d\xf7\xcc\x24\xf0\x58\xab\xec\xda\x14\x13\x9c\xf4\x3a\x2b\x4f\xc4\xb9\xf8\xf1\x43\x44\xfa\xe7\xbc\x65\xa2\xcd\x45\x2f\x18\x04\x41\x14\x35\xb1\x89\x9b\x05\x49\x56\x42\xea\x5c\x66\x34\x83\xba\x26\x85\x59\x54\xb0\x2a\xf9\x92\xf4\xab\x2a\x7c\x84\x25\xb0\x0d\xc8\xba\x6e\xa1\x81\x1e\xde\x81\x5a\x8b\xd8\x2a\xfa\x03\x02\x52\x6a\x3f\xc1\x89\xcb\xbf\x8d\x1e\xee\xe6\xdb\x1f\x90\xf3\xdf\x6c\xb6\x27\x12\x54\x29\xf9\x3b\xec\x07\x3a\xec\xd4\xe4\xf4\x15\xb6\x43\x72\x9a\x93\xff\xff\x4a\xc2\x07\x29\x72\x90\x8a\x41\xa1\x3d\x21\x61\x6f\x19\xa4\x71\x37\xda\xc9\xc1\xe4\x07\x1a\xb6\xa6\x4f\x6b\x20\xb9\x75\xba\x25\xa2\x54\x79\xa9\x0a\xa2\xd6\x40\x94\xc8\x52\xf2\x0a\x5b\xc2\x69\x06\xa4\xe4\x29\x14\x05\xa1\x3a\x54\x09\x84\x15\xa4\x00\x65\x8a\xe8\x56\xb4\x35\x55\xf2\x31\xb5\xf3\xef\x4c\xad\x89\xab\x9d\xf9\x96\x55\x05\x69\x61\x04\x9d\x92\x91\xed\x77\x35\x38\x5b\x11\x56\x98\x42\x4c\xb8\x9a\xb2\x42\x91\x70\xc2\xeb\x7a\xd8\x4d\x6e\xc2\xfb\xc1\x89\xc5\x5d\x6d\xd8\x90\x9c\x6e\x4c\x65\x26\x7a\x5a\x69\xaf\x6c\x45\x4e\x99\xb6\x74\x01\xaa\xea\x74\xd3\x44\x1b\xb8\x70\x78\xe8\xdb\x54\xd0\x9f\x0c\x6e\x4c\xff\x63\xf8\xb9\x92\x8c\x27\x3f\x17\xdf\xda\x62\x0b\xe8\xd9\x15\xf4\xde\x59\x82\xfd\x56\x53\xe0\x89\x5a\xef\x85\xb5\xca\x7e\x55\x31\x1e\xc3\x1b\x09\xc9\xc7\xba\x1e\xb6\xd2\xa7\xba\x1e\xec\x7e\x48\xeb\xeb\xb1\xe4\x80\xfa\x6b\x27\xfe\xb5\xcf\x3b\xaa\x96\xfb\xee\x8c\xae\x2f\x21\x81\xb7\x3c\xbc\x2b\x0b\x35\x12\x59\xce\x52\xe8\xbb\xf3\x63\xb0\xe7\x29\x3a\x23\x0b\x21\x52\xa0\xcd\x06\x14\xb2\x68\x37\x4b\x27\x01\xf8\x56\x32\x09\xf1\xfe\xf2\x9d\x1a\x5b\xdf\x4c\xa8\x19\x4b\xf7\x0c\xac\x12\xc5\x0f\xd9\xa3\xe0\xbd\x9c\x09\x75\x93\xe5\x6a\x7b\x68\xd2\xce\x61\xc6\x98\x11\x02\x47\x67\xe4\x97\x08\x29\x4d\xb7\x30\xfa\x80\x2f\xc2\x97\x97\x17\xac\x5e\x37\x19\xb5\xf9\xb0\xc2\x8e\xf1\xc5\x50\x96\xde\x0a\x99\xe9\xad\xd2\xa2\x56\x83\x19\x3c\x3f\x4e\x1d\xf8\xfc\x38\x45\xfb\x0c\xbe\x95\x50\xa8\x96\x6b\x15\xef\xe2\x93\x7d\x7c\x82\xe1\x57\x69\xbe\xa6\x8e\x34\x63\x0c\x1a\xb3\x84\xf9\x74\xcc\xf8\xa8\x27\x5e\x66\x20\xd9\xb2\xeb\xd0\xa9\xd0\xdc\x9f\x6e\xa7\xa0\x94\xbe\x85\x6c\x05\xbc\x7c\x04\xee\xae\xc3\x8b\xef\xfa\x9d\xed\x2c\x67\x5f\x7d\xc4\xf4\xc0\xe8\x1d\x7c\x2a\xbe\x83\x1c\x51\x7d\xe8\x1b\xba\x91\x51\xdf\x79\xbe\x03\x37\x32\x06\xff\x01\x6f\x34\x86\x25\xcb\xa8\xef\xb9\x8e\xe6\x88\xc1\x48\xa4\x42\xb6\xb4\x11\xd1\x1e\xf9\xfd\xba\x8b\x7a\x11\x43\xcd\x8d\x63\xa8\x09\x47\x6b\xed\x6e\x05\x83\x98\x31\x9a\xf9\xf3\x64\xbc\xf9\xec\xd3\x36\xc2\x51\xec\xa2\x8b\x5d\x1c\xc5\xbe\x74\xb1\x2f\xc7\xb0\x0e\x84\x21\x23\x09\x31\x53\x23\x2a\x63\x07\xb6\x0a\xb4\x18\xf3\xeb\xd9\xa7\x8f\xbe\x1e\x46\x38\x8a\x7d\xee\x62\x68\xb6\x7a\xa6\x03\x61\xc8\x9f\xf3\x7b\x8f\xe8\x21\xba\xed\xe6\xa3\x89\xdf\xea\x66\x8c\x41\x0f\x92\x71\x45\x17\x29\x74\xe9\x5d\x25\x7a\x1d\x95\xa9\x62\x8b\xad\xf2\x0d\xdb\xc8\x68\x23\x94\x69\xfa\x17\x8b\xed\x75\xa8\x9b\xc1\xcb\x68\xb3\xd2\x74\xd5\x85\x1b\x19\x83\xbf\x52\xc9\xf4\x3a\xbb\x06\x3b\x3a\xcc\xe8\x9a\x16\x70\xe9\x7b\xc9\x0a\xe8\xd1\x46\x15\x6d\xcf\x4a\x27\xa1\x07\xfb\xa7\xc6\x9b\x1e\xa2\xdd\x24\x4a\xae\xe4\x56\xff\x09\xf9\x9f\xef\xa7\x8e\xea\x1f\x4c\x3e\x1f\x9a\xa0\x6d\x33\x66\x34\xf5\x4f\x21\x77\x22\x7b\x05\xfa\x0d\xaf\x46\xfe\xeb\x5d\x8d\xd0\x36\x7c\xf0\x4d\xf8\x80\x4f\x37\x3b\x52\x0f\x8f\x20\x97\x2d\x72\x89\x21\xf3\x72\x11\x8b\x8c\x32\xee\xb8\x46\x46\x33\xec\x92\xe3\xe3\xd8\x6c\x6e\xdf\xde\x96\xb3\x12\xda\x6c\xa2\xf0\x27\x94\x1e\xa2\x1b\xc4\xfc\x27\xb3\xdb\x42\x48\x14\xb9\x13\x3c\x11\xcd\x89\xe2\x24\xf4\x4e\xa0\x8a\xa9\x32\x6e\xae\x04\x27\xe2\xd7\x07\x4f\x76\x58\x2f\xa3\x35\x9c\xfb\xb3\x60\x3e\x47\x8f\x82\x39\x64\x9b\xe6\x2e\xb5\x02\xf6\x04\xb2\x2f\x9c\xee\xfb\xa6\x37\x18\xf6\xf4\xbb\xda\x13\xc8\xbf\xad\xe6\x6f\xac\xf3\x37\x40\xe9\x83\xbf\x84\xc6\xac\x0e\xfe\x0e\x00\x00\xff\xff\x16\x79\xd9\x83\x9b\x0f\x00\x00")

func templatesOzzoValidatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesOzzoValidatorTmpl,
		"templates/ozzo-validator.tmpl",
	)
}

func templatesOzzoValidatorTmpl() (*asset, error) {
	bytes, err := templatesOzzoValidatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ozzo-validator.tmpl", size: 3995, mode: os.FileMode(0666), modTime: time.Unix(1705221221, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0x72, 0x33, 0x46, 0xee, 0x4, 0x7f, 0x4e, 0x7f, 0x83, 0xa3, 0xef, 0xee, 0xfa, 0x16, 0x52, 0x8d, 0x2d, 0xfa, 0x4f, 0x85, 0xb, 0xea, 0xcd, 0x59, 0x8b, 0xad, 0x11, 0xd4, 0x42, 0xb, 0x16}}
	return a, nil
}

var _templatesStructTomlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x6f\x8b\xd3\x40\x10\xc6\xdf\xef\xa7\x18\xb6\xbe\x50\xf0\x42\x91\xab\x60\xa1\x2f\x8a\x87\x20\x78\x22\x9c\x1c\xe1\x4a\x95\x35\x3b\x69\x87\x4b\xb2\xeb\xec\x44\x2d\x87\xdf\x5d\x76\xd3\x5e\x12\x7b\x97\x97\x3b\x7f\x7e\xcf\xf3\x64\x32\x83\xaf\x07\x8f\x4b\x08\xc2\x6d\x21\xe0\x18\x6a\xe3\x55\xac\xad\x74\x57\xd3\x6a\x06\xd7\x28\x7b\x67\x3f\x9b\x1a\x97\xf0\xd2\x79\x21\xd7\x98\xea\x15\xd4\xa9\x0c\x8d\xa9\x11\x5c\x09\xb2\x47\xf8\x65\x2a\xb2\x46\x1c\xab\x7e\x67\xa5\x6f\xbb\x2a\x6a\xa5\x66\x70\x7b\x1a\x09\x59\x9e\xe7\xcb\xfe\x0d\xd4\x94\x8e\x6b\x13\xf1\x50\x3a\x3e\x99\xca\xf3\x5c\x6d\x06\x5b\x6b\x6b\x19\x43\xd8\xaa\x19\x7c\x31\xc5\xbd\xd9\xe1\x10\xe2\xbb\x52\x72\xa5\x8e\x7d\x58\x81\x36\xdd\x56\x8c\x73\x16\xe4\x28\x44\x16\x1b\xa1\x92\x90\x33\xb8\xc7\x43\x17\x8c\x02\x84\xf6\x47\x10\x92\x56\xd0\x82\x09\x60\xb1\x34\x6d\x25\x2a\x62\x22\x79\xdd\x93\xaf\x88\x47\xe0\x2b\x62\x2c\xc4\xf1\x01\xc4\x81\x6b\xc5\xb7\xd2\x7f\x22\x08\xae\xe5\x02\xa1\x70\x16\xb3\x53\x94\x47\xd1\x93\xca\x0c\x3e\x50\x85\x67\x96\xfb\xc0\x25\x55\xdd\x56\x06\x7a\x73\xa4\x6c\xbf\x3f\xaa\x64\x3b\xa7\x23\x2f\x5e\x67\xcc\xbc\x76\x76\xcc\x4c\xa4\xda\xd9\xf3\x6b\x0e\xad\xc2\xfc\xed\xe5\xe5\xd8\xe1\xc7\xda\x3b\x96\x11\x6b\x6d\x2d\x18\x6b\xa9\x7b\x9f\xae\x12\xe0\xf7\x1e\x9b\x67\xb8\x94\x28\xc9\x69\xad\x3a\x24\xac\x60\xa3\x19\x77\xf8\xc7\xeb\x74\x6f\x76\x1e\x59\x08\xc3\xb2\x87\x84\xf4\xb3\xa0\x29\xf6\x50\x12\x56\x36\xba\xef\x2e\xaa\xfa\xf9\xec\x46\x18\x51\x32\x39\xf8\x74\xb4\x20\x4c\xcd\x4e\x3f\x31\xc1\xf8\xb3\x25\x46\x0b\x2b\x10\x6e\xf1\x89\x89\x4f\xd8\xec\x64\x1f\xbd\x2d\x5e\x2f\xe6\xdb\xe1\xc4\x7b\x92\xc3\x94\x46\xea\x4f\x28\xa4\xfe\x90\x0f\xff\x09\xdc\x88\x11\x9c\x4e\x11\x07\x26\x43\xc4\x81\xda\x48\x11\x25\xf4\xb7\xcd\xfa\xe2\x6e\xfb\xf0\xe6\xef\x8b\x11\xe6\x8e\xfc\x94\x4a\x6c\x4f\x68\xc4\xf6\x40\x61\x7e\xf1\x6e\xfb\xb0\x88\x0a\x4a\xfd\x0b\x00\x00\xff\xff\x1f\x77\xc5\xb7\x72\x04\x00\x00")

func templatesStructTomlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesStructTomlTmpl,
		"templates/struct-toml.tmpl",
	)
}

func templatesStructTomlTmpl() (*asset, error) {
	bytes, err := templatesStructTomlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/struct-toml.tmpl", size: 1138, mode: os.FileMode(0666), modTime: time.Unix(1704807854, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2d, 0x35, 0x11, 0xd9, 0x8c, 0x8d, 0x40, 0x8a, 0xe, 0x46, 0x19, 0xb, 0x20, 0xb3, 0xb3, 0xfb, 0x60, 0x60, 0xfe, 0x62, 0x54, 0xe2, 0xe2, 0xc0, 0x51, 0x3c, 0x81, 0xbf, 0xa3, 0xf9, 0x4d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/ozzo-validator-test.tmpl": templatesOzzoValidatorTestTmpl,
	"templates/ozzo-validator.tmpl":      templatesOzzoValidatorTmpl,
	"templates/struct-toml.tmpl":         templatesStructTomlTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"ozzo-validator-test.tmpl": {templatesOzzoValidatorTestTmpl, map[string]*bintree{}},
		"ozzo-validator.tmpl":      {templatesOzzoValidatorTmpl, map[string]*bintree{}},
		"struct-toml.tmpl":         {templatesStructTomlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
