// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/ozzo-validator.tmpl (3.983kB)
// templates/struct-toml.tmpl (1.138kB)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesOzzoValidatorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\xdf\x6f\xe2\xb8\x13\xc0\x9f\x9b\xbf\xc2\x42\xd5\x0a\x2a\x9a\xec\x7e\xb7\xdb\x87\xaf\xee\x4e\x6a\xa1\xbd\xe3\x44\x69\x55\xda\xbd\xbe\x1a\x32\x04\xab\x89\x9d\x75\x1c\xb6\x6c\x94\xff\xfd\xe4\x5f\x49\x80\xa1\xa7\xdb\x7b\x41\x9e\xf1\x67\x66\x3c\x93\xf1\x0f\xa2\x88\x8c\x44\x0c\x24\x01\x0e\x92\x2a\x88\xc9\x62\x4b\x12\xa6\xd6\xe5\x22\x5c\x8a\x2c\x7a\xa5\x5c\x6e\xcb\x68\x43\x53\x16\xd3\x04\x78\x48\xc6\xf7\x64\x76\xff\x44\x6e\xc6\x93\xa7\x30\xc8\xe9\xf2\x95\x26\x40\xaa\x2a\x7c\xb0\xc3\xba\x0e\x02\x96\xe5\x42\x2a\xd2\x0f\xaa\xea\x9c\x44\x67\xc4\xc9\x0e\x2e\x48\x0c\x2b\xc6\x21\x26\x54\x91\xaf\xc6\xb1\x82\xb9\x92\xe5\x52\x85\x13\x4b\x9e\x45\x75\x6d\x8c\x25\xe5\x09\x10\xa7\xae\xeb\xe0\xa4\x57\x55\x61\x5d\xf7\xcc\x24\xf0\x58\xab\xec\xda\x14\x13\x9c\xf4\x3a\x2b\x4f\xc4\xb9\xf8\xf1\x43\x44\xfa\xe7\xbc\x65\xa2\xcd\x45\x2f\x18\x04\x41\x14\x35\xb1\x89\x9b\x05\x49\x56\x42\xea\x5c\x66\x34\x83\xba\x26\x85\x59\x54\xb0\x2a\xf9\x92\xf4\x69\x3b\x31\xd0\xc3\x3b\x50\x6b\x11\x5b\x45\x7f\x40\x40\x4a\x6d\x1b\x9c\xb8\x9c\xdb\x88\xe1\x6e\x8e\xfd\x01\x39\xff\xcd\x66\x78\x22\x41\x95\x92\xbf\xc3\x7e\xa0\xc3\x4e\x1d\x4e\x5f\x61\x3b\x24\xa7\x39\xf9\xff\xaf\x24\x7c\x90\x22\x07\xa9\x18\x14\xda\x13\x12\xf6\x96\x41\x1a\x77\xa3\x9d\x1c\x4c\x7e\xa0\x61\x6b\xfa\xb4\x06\x92\x5b\xa7\x5b\x22\x4a\x95\x97\xaa\x20\x6a\x0d\x44\x89\x2c\x25\xaf\xb0\x25\x9c\x66\x40\x4a\x9e\x42\x51\x10\xaa\x43\x95\x40\x58\x41\x0a\x50\xa6\x70\x6e\x45\x5b\x53\x25\x1f\x53\x3b\xff\xce\xd4\x9a\xb8\xda\x99\xef\x57\x55\x90\x16\x46\xd0\x29\x19\xd9\x7e\x4b\x83\xb3\x15\x61\x85\x29\xc4\x84\xab\x29\x2b\x14\x09\x27\xbc\xae\x87\xdd\xe4\x26\xbc\x1f\x9c\x58\xdc\xd5\x86\x0d\xc9\xe9\xc6\x54\x66\xa2\xa7\x95\xf6\xca\x56\xe4\x94\x69\x4b\x17\xa0\xaa\x4e\x37\x4d\xb4\x81\x0b\x87\x87\xbe\x4d\x05\xfd\xc9\xe0\xc6\xf4\x3f\x86\x9f\x2b\xc9\x78\xf2\x73\xf1\xad\x2d\xb6\x80\x9e\x5d\x41\xef\x9d\x25\xd8\x6f\x35\x05\x9e\xa8\xf5\x5e\x58\xab\xec\x57\x15\xe3\x31\xbc\x91\x90\x7c\xac\xeb\x61\x2b\x7d\xaa\xeb\xc1\xee\x87\xb4\xbe\x1e\x4b\x0e\xa8\xbf\x76\xe2\x5f\xfb\xbc\xa3\x6a\xb9\xef\xce\xe8\xfa\x12\x12\x78\xcb\xc3\xbb\xb2\x50\x23\x91\xe5\x2c\x85\xbe\x3b\x33\x06\x7b\x9e\xa2\x33\xb2\x10\x22\x05\xda\x6c\x40\x21\x8b\x76\xb3\x74\x12\x80\x6f\x25\x93\x10\xef\x2f\xdf\xa9\xb1\xf5\xcd\x84\x9a\xb1\x74\xcf\xc0\x2a\x51\xfc\x90\x3d\x0a\xde\xcb\x99\x50\x37\x59\xae\xb6\x87\x26\xed\x1c\x66\x8c\x19\x21\x70\x74\x46\x7e\x89\x90\xd2\x74\x0b\xa3\x0f\xf5\x22\x7c\x79\x79\xc1\xea\x75\x93\x51\x9b\x0f\x2b\xec\x18\x5f\x0c\x65\xe9\xad\x90\x99\xde\x2a\x2d\x6a\x35\x98\xc1\xf3\xe3\xd4\x81\xcf\x8f\x53\xb4\xcf\xe0\x5b\x09\x85\x6a\xb9\x56\xf1\x2e\x3e\xd9\xc7\x27\x18\x7e\x95\xe6\x6b\xea\x48\x33\xc6\xa0\x31\x4b\x98\x4f\xc7\x8c\x8f\x7a\xe2\x65\x06\x92\x2d\xbb\x0e\x9d\x0a\xcd\xfd\xe9\x76\x0a\x4a\x81\xf4\x15\xf0\xf2\x11\xb8\xbb\x0e\x2f\xbe\xeb\x77\xb6\xb3\x9c\x7d\xf5\x11\xd3\x03\xa3\x77\xf0\xa9\xf8\x0e\x72\x44\xf5\xa1\x6f\xe8\x46\x46\x7d\xe7\xf9\x0e\xdc\xc8\x18\xfc\x07\xbc\xd1\x18\x96\x2c\xa3\xbe\xe7\x3a\x9a\x23\x06\x23\x91\x0a\xd9\xd2\x46\x44\x7b\xe4\xf7\xeb\x2e\xea\x45\x0c\x35\x37\x8e\xa1\x26\x1c\xad\xb5\xbb\x15\x0c\x62\xc6\x68\xe6\xcf\x93\xf1\xe6\xb3\x4f\xdb\x08\x47\xb1\x8b\x2e\x76\x71\x14\xfb\xd2\xc5\xbe\x1c\xc3\x3a\x10\x86\x8c\x24\xc4\x4c\x8d\xa8\x8c\x1d\xd8\x2a\xd0\x62\xcc\xaf\x67\x9f\x3e\xfa\x7a\x18\xe1\x28\xf6\xb9\x8b\xa1\xd9\xea\x99\x0e\x84\x21\x7f\xce\xef\x3d\xa2\x87\xe8\xb6\x9b\x8f\x26\x7e\xab\x9b\x31\x06\x3d\x48\xc6\x15\x5d\xa4\xd0\xa5\x77\x95\xe8\x75\x54\xa6\x8a\x2d\xb6\xca\x37\x6c\x23\xa3\x8d\x50\xa6\xe9\x5f\x2c\xb6\xd7\xa1\x6e\x06\x2f\xa3\xcd\x4a\xd3\x55\x17\x6e\x64\x0c\xfe\x4a\x25\xd3\xeb\xec\x1a\xec\xe8\x30\xa3\x6b\x5a\xc0\xa5\xef\x25\x2b\xa0\x47\x1b\x55\xb4\x3d\x2b\x9d\x84\x1e\xec\x9f\x1a\x6f\x7a\x88\x76\x93\x28\xb9\x92\x5b\xfd\xc7\xe3\x7f\xbe\x9f\x3a\xaa\x7f\x30\xf9\x7c\x68\x82\xb6\xcd\x98\xd1\xd4\x3f\x85\xdc\x89\xec\x15\xe8\x37\xbc\x1a\xf9\xaf\x77\x35\x42\xdb\xf0\xc1\x37\xe1\x03\x3e\xdd\xec\x48\x3d\x3c\x82\x5c\xb6\xc8\x25\x86\xcc\xcb\x45\x2c\x32\xca\xb8\xe3\x1a\x19\xcd\xb0\x4b\x8e\x8f\x63\xb3\xb9\x7d\x7b\x5b\xce\x4a\x68\xb3\x89\xc2\x9f\x50\x7a\x88\x6e\x10\xf3\x3f\xcc\x6e\x0b\x21\x51\xe4\x4e\xf0\x44\x34\x27\x8a\x93\xd0\x3b\x81\x2a\xa6\xca\xb8\xb9\x12\x9c\x88\x5f\x1f\x3c\xd9\x61\xbd\x8c\xd6\x70\xee\xcf\x82\xf9\x1c\x3d\x0a\xe6\x90\x6d\x9a\xbb\xd4\x0a\xd8\x13\xc8\xbe\x70\xba\xef\x9b\xde\x60\xd8\xd3\xef\x6a\x4f\x20\xff\xb6\x9a\xbf\xae\xce\xdf\x00\xa5\x0f\xfe\x12\x1a\xb3\x3a\xf8\x3b\x00\x00\xff\xff\xab\x7b\x52\x4a\x8f\x0f\x00\x00")

func templatesOzzoValidatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesOzzoValidatorTmpl,
		"templates/ozzo-validator.tmpl",
	)
}

func templatesOzzoValidatorTmpl() (*asset, error) {
	bytes, err := templatesOzzoValidatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ozzo-validator.tmpl", size: 3983, mode: os.FileMode(0644), modTime: time.Unix(1704714263, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0x56, 0x28, 0x95, 0x16, 0x90, 0xf6, 0x90, 0x17, 0x14, 0x25, 0xb4, 0x9b, 0x9e, 0x62, 0x53, 0x94, 0xed, 0xc1, 0x9f, 0x3e, 0x83, 0xda, 0x2a, 0x2e, 0xf1, 0x5, 0x3b, 0x66, 0x7, 0xa3, 0x81}}
	return a, nil
}

var _templatesStructTomlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x6f\x8b\xd3\x40\x10\xc6\xdf\xef\xa7\x18\xb6\xbe\x50\xf0\x42\x91\xab\x60\xa1\x2f\x8a\x87\x20\x78\x22\x9c\x1c\xe1\x4a\x95\x35\x3b\x69\x87\x4b\xb2\xeb\xec\x44\x2d\x87\xdf\x5d\x76\xd3\x5e\x12\x7b\x97\x97\x3b\x7f\x7e\xcf\xf3\x64\x32\x83\xaf\x07\x8f\x4b\x08\xc2\x6d\x21\xe0\x18\x6a\xe3\x55\xac\xad\x74\x57\xd3\x6a\x06\xd7\x28\x7b\x67\x3f\x9b\x1a\x97\xf0\xd2\x79\x21\xd7\x98\xea\x15\xd4\xa9\x0c\x8d\xa9\x11\x5c\x09\xb2\x47\xf8\x65\x2a\xb2\x46\x1c\xab\x7e\x67\xa5\x6f\xbb\x2a\x6a\xa5\x66\x70\x7b\x1a\x09\x59\x9e\xe7\xcb\xfe\x0d\xd4\x94\x8e\x6b\x13\xf1\x50\x3a\x3e\x99\xca\xf3\x5c\x6d\x06\x5b\x6b\x6b\x19\x43\xd8\xaa\x19\x7c\x31\xc5\xbd\xd9\xe1\x10\xe2\xbb\x52\x72\xa5\x8e\x7d\x58\x81\x36\xdd\x56\x8c\x73\x16\xe4\x28\x44\x16\x1b\xa1\x92\x90\x33\xb8\xc7\x43\x17\x8c\x02\x84\xf6\x47\x10\x92\x56\xd0\x82\x09\x60\xb1\x34\x6d\x25\x2a\x62\x22\x79\xdd\x93\xaf\x88\x47\xe0\x2b\x62\x2c\xc4\xf1\x01\xc4\x81\x6b\xc5\xb7\xd2\x7f\x22\x08\xae\xe5\x02\xa1\x70\x16\xb3\x53\x94\x47\xd1\x93\xca\x0c\x3e\x50\x85\x67\x96\xfb\xc0\x25\x55\xdd\x56\x06\x7a\x73\xa4\x6c\xbf\x3f\xaa\x64\x3b\xa7\x23\x2f\x5e\x67\xcc\xbc\x76\x76\xcc\x4c\xa4\xda\xd9\xf3\x6b\x0e\xad\xc2\xfc\xed\xe5\xe5\xd8\xe1\xc7\xda\x3b\x96\x11\x6b\x6d\x2d\x18\x6b\xa9\x7b\x9f\xae\x12\xe0\xf7\x1e\x9b\x67\xb8\x94\x28\xc9\x69\xad\x3a\x24\xac\x60\xa3\x19\x77\xf8\xc7\xeb\x74\x6f\x76\x1e\x59\x08\xc3\xb2\x87\x84\xf4\xb3\xa0\x29\xf6\x50\x12\x56\x36\xba\xef\x2e\xaa\xfa\xf9\xec\x46\x18\x51\x32\x39\xf8\x74\xb4\x20\x4c\xcd\x4e\x3f\x31\xc1\xf8\xb3\x25\x46\x0b\x2b\x10\x6e\xf1\x89\x89\x4f\xd8\xec\x64\x1f\xbd\x2d\x5e\x2f\xe6\xdb\xe1\xc4\x7b\x92\xc3\x94\x46\xea\x4f\x28\xa4\xfe\x90\x0f\xff\x09\xdc\x88\x11\x9c\x4e\x11\x07\x26\x43\xc4\x81\xda\x48\x11\x25\xf4\xb7\xcd\xfa\xe2\x6e\xfb\xf0\xe6\xef\x8b\x11\xe6\x8e\xfc\x94\x4a\x6c\x4f\x68\xc4\xf6\x40\x61\x7e\xf1\x6e\xfb\xb0\x88\x0a\x4a\xfd\x0b\x00\x00\xff\xff\x1f\x77\xc5\xb7\x72\x04\x00\x00")

func templatesStructTomlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesStructTomlTmpl,
		"templates/struct-toml.tmpl",
	)
}

func templatesStructTomlTmpl() (*asset, error) {
	bytes, err := templatesStructTomlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/struct-toml.tmpl", size: 1138, mode: os.FileMode(0644), modTime: time.Unix(1704617581, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2d, 0x35, 0x11, 0xd9, 0x8c, 0x8d, 0x40, 0x8a, 0xe, 0x46, 0x19, 0xb, 0x20, 0xb3, 0xb3, 0xfb, 0x60, 0x60, 0xfe, 0x62, 0x54, 0xe2, 0xe2, 0xc0, 0x51, 0x3c, 0x81, 0xbf, 0xa3, 0xf9, 0x4d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/ozzo-validator.tmpl": templatesOzzoValidatorTmpl,
	"templates/struct-toml.tmpl":    templatesStructTomlTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"ozzo-validator.tmpl": {templatesOzzoValidatorTmpl, map[string]*bintree{}},
		"struct-toml.tmpl":    {templatesStructTomlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
